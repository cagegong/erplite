// Generated by CoffeeScript 1.7.1
angular.module('calendarModule').constant('coolCalendarConfig', {
  useIsoweek: true,
  headerHeight: 60,
  height: 360,
  dayNames: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
  templateUrl: 'Calendar/views/calendarTpl.html'
}).factory('weeksOfMonth', [
  'coolCalendarConfig', function(coolCalendarConfig) {
    return function(date) {
      var calendarMonthDates, calendarMonthFirstDate, calendarMonthLastDate, calendarMonthWeeks, dateIndex, day, i, j, monthFirstDate, monthLastDate, selectedDay, week, weekDay, weeks, _i, _j, _ref;
      selectedDay = moment(date);
      monthFirstDate = angular.copy(selectedDay).startOf('month');
      monthLastDate = angular.copy(selectedDay).endOf('month');
      if (coolCalendarConfig.useIsoweek) {
        calendarMonthFirstDate = angular.copy(monthFirstDate).startOf('isoWeek');
        calendarMonthLastDate = angular.copy(monthLastDate).endOf('isoWeek');
      } else {
        calendarMonthFirstDate = angular.copy(monthFirstDate).startOf('week');
        calendarMonthLastDate = angular.copy(monthLastDate).endOf('week');
      }
      calendarMonthDates = angular.copy(calendarMonthFirstDate).twix(calendarMonthLastDate).count("days");
      calendarMonthWeeks = calendarMonthDates / 7;
      weeks = [];
      dateIndex = angular.copy(calendarMonthFirstDate);
      for (i = _i = 0, _ref = calendarMonthWeeks - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        week = [];
        for (j = _j = 0; _j <= 6; j = ++_j) {
          weekDay = {};
          day = angular.copy(dateIndex);
          dateIndex.add('days', 1);
          weekDay.day = day;
          weekDay.isInCurrentMonth = day.month() === selectedDay.month() ? true : false;
          weekDay.isToday = day.isSame(moment(), 'day') ? true : false;
          weekDay.isSelected = day.isSame(date, 'day') ? true : false;
          week.push(weekDay);
        }
        weeks.push(week);
      }
      return weeks;
    };
  }
]).factory('eventsOfDay', [
  function() {
    return function(currentMoment, eventSource) {
      var event, events, _i, _len;
      events = [];
      if (eventSource != null) {
        for (_i = 0, _len = eventSource.length; _i < _len; _i++) {
          event = eventSource[_i];
          if (moment(event.start).isSame(currentMoment, 'day')) {
            events.push(event);
          }
        }
      }
      return events;
    };
  }
]).factory('bindEvents', [
  'eventsOfDay', function(eventsOfDay) {
    return function(eventSource, weeks) {
      var day, week, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = weeks.length; _i < _len; _i++) {
        week = weeks[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = week.length; _j < _len1; _j++) {
            day = week[_j];
            day.events = eventsOfDay(day.day, eventSource);
            _results1.push(day.hasEvents = day.events.length > 0 ? true : false);
          }
          return _results1;
        })());
      }
      return _results;
    };
  }
]).factory('findDayInWeeks', [
  function() {
    return function(date, weeks) {
      var day, week, _i, _j, _len, _len1;
      for (_i = 0, _len = weeks.length; _i < _len; _i++) {
        week = weeks[_i];
        for (_j = 0, _len1 = week.length; _j < _len1; _j++) {
          day = week[_j];
          if (day.day.isSame(date)) {
            return day;
          }
        }
      }
    };
  }
]).directive('coolCalendar', [
  '$log', 'coolCalendarConfig', 'weeksOfMonth', 'eventsOfDay', 'bindEvents', 'findDayInWeeks', function($log, coolCalendarConfig, weeksOfMonth, eventsOfDay, bindEvents, findDayInWeeks) {
    return {
      restrict: 'EA',
      replace: true,
      templateUrl: coolCalendarConfig.templateUrl,
      scope: {
        'height': '=calendarHeight',
        'eventSource': '=eventSource',
        'selectedDay': '=selectedDay',
        'dayClickHandler': '=dayClick',
        'headerHeight': '@headerHeight'
      },
      link: function($scope, $element) {
        var handles, lastChosen, sunday;
        if (coolCalendarConfig.useIsoweek) {
          $scope.dayNames = angular.copy(coolCalendarConfig.dayNames);
        } else {
          $scope.dayNames = angular.copy(coolCalendarConfig.dayNames);
          sunday = $scope.dayNames.pop();
          $scope.dayNames.unshift(sunday);
        }
        if ($scope.height == null) {
          $scope.height = coolCalendarConfig.height;
        }
        if ($scope.headerHeight == null) {
          $scope.headerHeight = coolCalendarConfig.headerHeight;
        }
        $scope.calendarStyle = {
          "height": $scope.height + "px"
        };
        $scope.calendarHeaderStyle = {
          "height": $scope.headerHeight / 2 + "px"
        };
        $scope.rowStyle = {
          "height": (($scope.height - $scope.headerHeight) / 5 > 24 ? ($scope.height - $scope.headerHeight) / 5 : 24) + "px"
        };
        $scope.$watch('height', function(newValue, oldValue) {
          if (newValue != null) {
            $scope.calendarStyle = {
              "height": newValue + "px"
            };
            return $scope.rowStyle = {
              "height": ((newValue - $scope.headerHeight) / 5 > 24 ? (newValue - $scope.headerHeight) / 5 : 24) + "px"
            };
          }
        });
        handles = [];
        if ($scope.selectedDay == null) {
          $scope.selectedDay = moment()._d;
        }
        $scope.weeks = weeksOfMonth($scope.selectedDay);
        $scope.$watch('selectedDay', function(newValue, oldValue) {
          var handle, _i, _len;
          if (newValue != null) {
            $scope.weeks = weeksOfMonth(newValue);
            bindEvents($scope.eventSource, $scope.weeks);
            for (_i = 0, _len = handles.length; _i < _len; _i++) {
              handle = handles[_i];
              handle();
            }
            return handles = [];
          }
        });
        bindEvents($scope.eventSource, $scope.weeks);
        $scope.$watchCollection('eventSource', function(newValue, oldValue) {
          if (newValue != null) {
            return bindEvents($scope.eventSource, $scope.weeks);
          }
        });
        lastChosen = {};
        $scope.dayClick = function(weekDay, $event) {
          var cordinate, day, week, x, y, _i, _j, _len, _len1, _ref;
          if (!weekDay.isInCurrentMonth) {
            $scope.selectedDay = moment($scope.selectedDay).year(weekDay.day.year()).month(weekDay.day.month())._d;
            handles.push(function() {
              var cordinate, day, week, x, y, _i, _j, _len, _len1, _ref;
              weekDay = findDayInWeeks(weekDay.day, $scope.weeks);
              lastChosen.isChosen = false;
              weekDay.isChosen = true;
              lastChosen = weekDay;
              if ($scope.dayClickHandler != null) {
                cordinate = {};
                y = 0;
                _ref = $scope.weeks;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  week = _ref[_i];
                  y++;
                  x = 0;
                  for (_j = 0, _len1 = week.length; _j < _len1; _j++) {
                    day = week[_j];
                    x++;
                    if (day.day.isSame(weekDay.day)) {
                      cordinate.x = x;
                      cordinate.y = y;
                      break;
                    }
                  }
                }
                cordinate.cellHeight = ($scope.height - $scope.headerHeight) / 5;
                cordinate.cellWidth = $element.find(".weekday")[0].clientWidth;
                return $scope.dayClickHandler(weekDay, $event, cordinate);
              }
            });
            return;
          }
          lastChosen.isChosen = false;
          weekDay.isChosen = true;
          lastChosen = weekDay;
          if ($scope.dayClickHandler != null) {
            cordinate = {};
            y = 0;
            _ref = $scope.weeks;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              week = _ref[_i];
              y++;
              x = 0;
              for (_j = 0, _len1 = week.length; _j < _len1; _j++) {
                day = week[_j];
                x++;
                if (day.day.isSame(weekDay.day)) {
                  cordinate.x = x;
                  cordinate.y = y;
                  break;
                }
              }
            }
            cordinate.cellHeight = ($scope.height - $scope.headerHeight) / 5;
            cordinate.cellWidth = $element.find(".weekday")[0].clientWidth;
            return $scope.dayClickHandler(weekDay, $event, cordinate);
          }
        };
        $scope.prevClick = function() {
          return $scope.selectedDay = moment($scope.selectedDay).add('months', -1)._d;
        };
        return $scope.nextClick = function() {
          return $scope.selectedDay = moment($scope.selectedDay).add('months', 1)._d;
        };
      }
    };
  }
]);
