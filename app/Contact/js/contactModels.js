// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  angular.module('contactModule').factory('ModelBase', [
    '$http', function($http) {
      var ModelBase;
      return ModelBase = (function() {
        function ModelBase(modelBase, postUrl) {
          if (postUrl != null) {
            this.postUrl = postUrl;
          }
          if (modelBase != null) {
            this.setData(modelBase);
          }
        }

        ModelBase.prototype.setData = function(modelBase) {
          return angular.extend(this, modelBase);
        };

        ModelBase.prototype.fromId = function(id, success, fail) {
          if (this.postUrl != null) {
            return $http.get(this.postUrl + id).success(function(modelBase) {
              if (modelBase.url == null) {
                modelBase.url = this.postUrl + id;
              }
              this.setData(modelBase);
              return success(modelBase);
            }).error(fail);
          } else {
            throw new Error("PostUrl not defined!");
          }
        };

        ModelBase.prototype.fromUrl = function(success, fail) {
          return $http.get(this.url).success(success).error(fail);
        };

        ModelBase.prototype.create = function(success, fail) {
          return $http.post(this.postUrl, this).success(success).error(fail);
        };

        ModelBase.prototype["delete"] = function(success, fail) {
          return $http["delete"](this.url).success(success).error(fail);
        };

        ModelBase.prototype.update = function(success, fail) {
          return $http.put(this.url, this).success(success).error(fail);
        };

        return ModelBase;

      })();
    }
  ]).factory('Contact', [
    '$rootScope', 'ModelBase', function($rootScope, ModelBase) {
      var Contact;
      return Contact = (function(_super) {
        __extends(Contact, _super);

        function Contact(contact) {
          ModelBase.call(this, contact, $rootScope.apimap.contact);
        }

        return Contact;

      })(ModelBase);
    }
  ]).factory('ContactData', [
    '$rootScope', 'ModelBase', function($rootScope, ModelBase) {
      var ContactData;
      return ContactData = (function(_super) {
        __extends(ContactData, _super);

        function ContactData(contactData) {
          ModelBase.call(this, contactData, $rootScope.apimap.contactdata);
        }

        return ContactData;

      })(ModelBase);
    }
  ]).factory('ContactLink', [
    '$rootScope', 'ModelBase', function($rootScope, ModelBase) {
      var ContactLink;
      return ContactLink = (function(_super) {
        __extends(ContactLink, _super);

        function ContactLink(contactLink) {
          ModelBase.call(this, contactLink, $rootScope.apimap.contactlink);
        }

        return ContactLink;

      })(ModelBase);
    }
  ]).factory('ContactTag', [
    '$rootScope', 'ModelBase', function($rootScope, ModelBase) {
      var ContactTag;
      return ContactTag = (function(_super) {
        __extends(ContactTag, _super);

        function ContactTag(contactTag) {
          ModelBase.call(this, contactTag, $rootScope.apimap.contacttag);
        }

        return ContactTag;

      })(ModelBase);
    }
  ]).factory('ContactComment', [
    '$rootScope', 'ModelBase', function($rootScope, ModelBase) {
      var ContactComment;
      return ContactComment = (function(_super) {
        __extends(ContactComment, _super);

        function ContactComment(contactComment) {
          ModelBase.call(this, contactComment, $rootScope.apimap.contactcomment);
        }

        return ContactComment;

      })(ModelBase);
    }
  ]).factory('ContactAttachment', [
    '$rootScope', 'ModelBase', function($rootScope, ModelBase) {
      var ContactAttachment;
      return ContactAttachment = (function(_super) {
        __extends(ContactAttachment, _super);

        function ContactAttachment(contactAttachment) {
          ModelBase.call(this, contactAttachment, $rootScope.apimap.contactattachment);
        }

        return ContactAttachment;

      })(ModelBase);
    }
  ]).factory('Contact.Models', [
    'Contact', 'ContactData', 'ContactLink', function() {
      return {
        Contact: Contact,
        ContactData: ContactData,
        ContactLink: ContactLink
      };
    }
  ]);

}).call(this);
