// Generated by CoffeeScript 1.7.1
angular.module('contactModule').factory('contactManager', [
  '$http', '$q', 'Contact', 'ContactData', 'erpSettings', '$log', '$rootScope', 'Restangular', function($http, $q, Contact, ContactData, erpSettings, $log, $rootScope, Restangular) {
    return {
      _pool: {},
      _syncTimeDict: {},
      _contactList: [],
      _retrieveInstance: function(id, data) {
        var instance;
        instance = thids._pool[id];
        if (instance != null) {
          instance.setData(data);
        } else {
          instance = new Contact(data);
          this._pool[id] = instance;
          this._syncTimeDict[id] = new Date();
        }
        return instance;
      },
      _search: function(id) {
        return this._pool[id];
      },
      _load: function(id, deferred) {
        var scope;
        scope = this;
        Restangular.one('contacts', id).get().then(function(contact) {
          if (contact.data != null) {
            return Restangular.oneUrl('contactdata', contact.data).get().then(function(contactData) {
              contact.dataObj = contactData;
              return deferred.resolve(contact);
            }, function(response) {
              return deferred.reject(response);
            });
          } else {
            return deferred.resolve(contact);
          }
        }, function(response) {
          console.log(response);
          return deferred.reject(response);
        });
      },
      loadContact: function(id) {
        var deferred;
        deferred = $q.defer();
        this._load(id, deferred);
        return deferred.promise;
      },
      loadContactList: function() {
        var deferred;
        deferred = $q.defer();
        Restangular.all('contacts').getList().then(function(data) {
          deferred.resolve(data);
          return this._contactList = data;
        }, function(response) {
          console.log(response);
          return deferred.reject(response);
        });
        return deferred.promise;
      },
      getPreviousContact: function(id) {
        var index, _i, _ref;
        if (typeof _contactList !== "undefined" && _contactList !== null) {
          for (index = _i = 0, _ref = _contactList.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
            if (_contactList[index].id === id) {
              if (index === 0) {
                return id;
              } else {
                return _contactList[index - 1].id;
              }
              break;
            }
          }
        }
        return id;
      },
      getNextContact: function(id) {
        var index, _i, _ref;
        if (typeof _contactList !== "undefined" && _contactList !== null) {
          for (index = _i = 0, _ref = _contactList.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
            if (_contactList[index].id === id) {
              if (index === _contactList.length - 1) {
                return id;
              } else {
                return _contactList[index + 1].id;
              }
              break;
            }
          }
        }
        return id;
      },
      getContact: function(id) {
        var contact, deferred;
        deferred = $q.defer();
        contact = this._search(id);
        if (contact != null) {
          deferred.resolve(contact);
        } else {
          this._load(id, deferred);
        }
        return deferred.promise;
      },
      initContactData: function(contactData) {
        return new ContactData(contactData);
      },
      setContact: function(contactData) {
        var contact, scope;
        scope = this;
        contact = this._search(contactData.id);
        if (contact != null) {
          contact.setData(contactData);
        } else {
          contact = scope._retrieveInstance(contactData);
        }
        return contact;
      }
    };
  }
]);
